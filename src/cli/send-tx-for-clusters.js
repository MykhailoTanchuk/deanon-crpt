#!/usr/bin/env ts-node-esm
import Web3 from 'web3';
import dotenv from 'dotenv';
dotenv.config();

const web3 = new Web3('http://127.0.0.1:8545');
// –î–ª—è EIP-1193-—Å—É–º—ñ—Å–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ Ganache
const provider = web3.currentProvider;

// –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –º–∞–π–Ω—ñ–Ω–≥—É
async function mineBlock() {
    return new Promise((resolve, reject) => {
        provider.send(
            { jsonrpc: '2.0', method: 'evm_mine', id: Date.now() },
            (err, _result) => (err ? reject(err) : resolve())
        );
    });
}

async function main() {
    const accounts = await web3.eth.getAccounts();
    if (accounts.length < 4) {
        console.error('–ü–æ—Ç—Ä—ñ–±–Ω–æ —â–æ–Ω–∞–π–º–µ–Ω—à–µ 4 unlocked-–∞–¥—Ä–µ—Å–∏ —É –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞');
        process.exit(1);
    }
    const [a, b, c, d] = accounts;

    console.log('1) A -> C');
    await web3.eth.sendTransaction({ from: a, to: c, value: web3.utils.toWei('1', 'ether') });

    console.log('2) B -> C');
    await web3.eth.sendTransaction({ from: b, to: c, value: web3.utils.toWei('2', 'ether') });

    // –†—É—á–Ω–µ –º–∞–π–Ω—ñ–Ω“ë: —Ç–µ–ø–µ—Ä –æ–±–∏–¥–≤—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –ø–æ—Ç—Ä–∞–ø–ª—è—Ç—å –≤ –æ–¥–∏–Ω –±–ª–æ–∫
    console.log('üõ†  Mining a block with both txs...');
    await mineBlock();

    console.log('3) C -> D');
    await web3.eth.sendTransaction({ from: c, to: d, value: web3.utils.toWei('0.5', 'ether') });

    // –ú–æ–∂–µ–º–æ –∑–Ω–æ–≤—É –ø—Ä–æ–º–∞–π–Ω–∏—Ç–∏ –¥–ª—è —Ü—ñ—î—ó —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –æ–∫—Ä–µ–º–æ
    console.log('üõ†  Mining the change-address tx...');
    await mineBlock();

    console.log('–ì–æ—Ç–æ–≤–æ!');
}

main().catch(console.error);
